Поиск отдела

1. Поиск отдела возможен только по названию
2. Пользователь вводит полное название или его часть в строку поиска
3. В API отправляем запрос POST/.../search-departments
В теле запроса JSON {“departmentName” = “значение из строки поиска”}
4. Поиск в БД отдела с заданным названием (для случая с sql-БД):
select * from departments
where dep_name like ‘% departmentName в JSON%’
5. Выводим пользователю:
- результаты поиска (успешный вариант)
- «Ничего не найдено, попробуйте изменить параметры поиска» (если в БД нет такого значения)
- ошибку (если она вернулась от БД или в процессе работы с API)

Поиск сотрудника

1. Поиск сотрудника возможен по фамилии, имени, отчеству или отделу. Для каждого параметра поиска задаем отдельную строку на UI (UI-реализацию и необходимость поиска по разным параметром обсудила бы с заказчиком).
2. Пользователь вводит необходимые параметры в поиск
3. В API отправляем запрос POST/.../search-employees
В теле запроса JSON c параметрами, которые ввел пользователь 
{“employeeFirstName” = “значение из строки поиска”,
“employeeMiddleName” = “значение из строки поиска”,
“employeeLastName” = “значение из строки поиска”,
“employeeDepName” = “значение из строки поиска”}
Если в строке поиска пусто, в JSON этот параметр не добавляем.
4. Поиск в БД сотрудника(ов) с заданными параметрами (для случая с sql-БД):
select * from employees
where 
first_name like ‘% employeeFirstName в JSON%’
and middle_name like ‘ employeeMiddleName в JSON’
and last_name like ‘ employeeLastName в JSON’
and dep_name like ‘ employeeDepName в JSON’
5. Выводим пользователю:
- результаты поиска (успешный вариант)
- «Ничего не найдено, попробуйте изменить параметры поиска» (если в БД нет такого значения)
- ошибку (если она вернулась от БД или в процессе работы с API)

Просмотр вкладки отдел

1. Пользователь нажимает на вкладку «Отдел»
2. Отправляем запрос в API GET/.../departments
3. Получаем из БД список всех отделов
select * from departments
4. Выводим пользователю список отделов. 
По умолчанию сортировка по имени (A-Z, А-Я)

Просмотр вкладки сотрудников

1. Пользователь нажимает на вкладку «Сотрудники»
2. Отправляем запрос в API GET/.../employees
3. Получаем из БД список всех сотрудников
select * from employees
4. Выводим пользователю список сотрудников. 
По умолчанию сортировка по имени (A-Z, А-Я)

Добавить новый отдел

1. Пользователь нажимает «Добавить отдел»
2. Выводим карточку со вводом параметров (название отдела)
3. Пользователь вводит данные и нажимает «Добавить»
4. Валидируем данные на UI в процессе ввода (количество символов, только доступные символы).
Обязательные параметры — название отдела.
Если данные не верны, выводим ошибку рядом с полем, в котором находится неверное значение.
5. Отправляем запрос в API POST/.../create-department
В теле запроса JSON {“departmentName” = “значение из строки ввода”}
6. Валидируем данные, возвращаем на UI ошибку, если в данных ошибка.
7. Создаем в БД новую запись
insert into departments
values (‘id’, ‘dep_name’)
8. Возвращаем пользователю ошибку или редиректим на страницу просмотра отделов

Добавить нового сотрудника

1. Пользователь нажимает «Добавить сотрудника»
2. Выводим карточку со вводом параметров (фамилия, имя, отчество, дата рождения, отдел, зарплата).
Дата рождения — поле с выбором даты из календаря.
Отдел — поле с выбором отдела из существующих.
3. Пользователь вводит данные и нажимает «Добавить»
4. Валидируем данные на UI в процессе ввода (количество символов, только доступные символы).
Обязательные параметры — фамилия, имя, дата рождения, отдел.
Если данные не верны, выводим ошибку рядом с полем, в котором находится неверное значение.
5. Отправляем запрос в API POST/.../create-employees
В теле запроса JSON 
{“employeeFirstName” = “значение из строки ввода”,
“employeeMiddleName” = “значение из строки ввода”,
“employeeLastName” = “значение из строки ввода”,
“employeeDepName” = “значение из строки ввода”,
“employeeBirthday” = “значение из строки ввода”
“employeeSalary” = “значение из строки ввода”}
6. Валидируем данные, возвращаем на UI ошибку, если в данных ошибка.
7. Создаем в БД новую запись
insert into employees
values (‘id’, ‘first_name’, ‘middle_name’, ‘last_name’, ‘birtday’, ‘dep_name’, ‘salary’)
8. Возвращаем пользователю ошибку или редиректим на страницу просмотра отделов

Изменить существующий отдел

1. Пользователь нажимает «Редактировать» у выбранного отдела в списке отделов.
2. делаем поле «Название» доступным для редактирования.
3. Пользователь вводит новое название и нажимает сохранить.
В процессе ввода нового названия валидируем введенное значение на UI.
4. Отправляем запрос в API POST/.../edit-department
В теле запроса JSON 
{“id” = id выбранного отдела, 
“departmentName” = “новое значение”}
5. Изменяем запись в БД
update from department 
set name = ‘ departmentName из JSON’
where id =’id из JSON’
6. Пользователю показываем список отделов или ошибку.

Изменить существующего пользователя

1. Пользователь нажимает «Редактировать» у выбранного сотрудника в списке сотрудников.
2. делаем поля «Фамилия», «Имя», «Отчество», «Дата рождения», «Отдел», «Зарплата» доступным для редактирования.
3. Пользователь вводит новые значения и нажимает сохранить.
В процессе ввода валидируем новые значения на UI.
4. Отправляем запрос в API POST/.../edit-employee
В теле запроса JSON 
{“id” = id выбранного сотрудника, 
“employeeFirstName” = “новое значение”,
“employeeMiddleName” = “новое значение”,
“employeeLastName” = “новое значение”,
“employeeDepName” = “новое значение”,
“employeeBirthday” = “новое значение”
“employeeSalary” = “новое значение”}
В JSON записываем только те параметры, которые пользователь отредактировал.
5. Изменяем запись в БД
update from employees 
set “поле, для которого нужно заменить значение” = ‘ новое значение для этого поля из JSON’
where id =’id из JSON’
6. Пользователю показываем список отделов или ошибку.

Удалить отдел

1. Пользователь нажимает на кнопку «Удалить» в строке у выбранного отдела.
2. Запрашиваем у пользователя подтверждение удаления.
3. Если пользователь нажал «Отмена», возвращаемся к исходной странице, на которой работал пользователь.
4. Если пользователь нажал «Удалить», переходим к удалению.
5. Отправляем запрос в API POST/.../delete-department
В теле передаем JSON {“id” = id выбранного отдела}
6. Удаляем значение из БД
delete from departments
where id = ‘id из JSON’
7. Пользователя возвращаем на страницу, с которой он работал и обновляем ее.

Удалить сотрудника

1. Пользователь нажимает на кнопку «Удалить» в строке у выбранного сотрудника.
2. Запрашиваем у пользователя подтверждение удаления.
3. Если пользователь нажал «Отмена», возвращаемся к исходной странице, на которой работал пользователь.
4. Если пользователь нажал «Удалить», переходим к удалению.
5. Отправляем запрос в API POST/.../delete-employee
В теле передаем JSON {“id” = id выбранного сотрудника}
6. Удаляем значение из БД
delete from employees
where id = ‘id из JSON’
7. Пользователя возвращаем на страницу, с которой он работал и обновляем ее.

Дополнительные вопросы к заказчику:
- нужно ли хранить историю изменения отделов/сотрудников?
- нужны ли массовые операции для работы с отделами/сотрудниками?
